{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../src/lib/decorators.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAoCH,MAAM,mBAAmB,GACrB,CAAC,OAAe,EAAE,KAA+B,EAAE,EAAE;IACnD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7C,sEAAsE;IACtE,wDAAwD;IACxD,8CAA8C;IAC9C,sEAAsE;IACtE,+BAA+B;IAC/B,kCAAkC;IAClC,OAAO,KAAY,CAAC;AACtB,CAAC,CAAC;AAEN,MAAM,qBAAqB,GACvB,CAAC,OAAe,EAAE,UAA2B,EAAE,EAAE;IAC/C,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,UAAU,CAAC;IACpC,OAAO;QACL,IAAI;QACJ,QAAQ;QACR,oEAAoE;QACpE,QAAQ,CAAC,KAA+B;YACtC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEN;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAe,EAAE,EAAE,CAC7C,CAAC,iBAA2D,EAAE,EAAE,CAC5D,CAAC,OAAO,iBAAiB,KAAK,UAAU,CAAC,CAAC,CAAC;IAC/C,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;IACjD,qBAAqB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;AAEtD,MAAM,gBAAgB,GAClB,CAAC,OAA4B,EAAE,OAAqB,EAAE,EAAE;IACtD,0EAA0E;IAC1E,wEAAwE;IACxE,kCAAkC;IAClC,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,UAAU;QAC/C,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;QACpC,uCACK,OAAO,KACV,QAAQ,CAAC,KAA6B;gBACpC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC,IACD;KACH;SAAM;QACL,qEAAqE;QACrE,qEAAqE;QACrE,+DAA+D;QAC/D,OAAO;YACL,IAAI,EAAE,OAAO;YACb,GAAG,EAAE,MAAM,EAAE;YACb,SAAS,EAAE,KAAK;YAChB,UAAU,EAAE,EAAE;YACd,kEAAkE;YAClE,iDAAiD;YACjD,uDAAuD;YACvD,MAAM;YACN,2BAA2B;YAC3B,wBAAwB;YACxB,2CAA2C;YAC3C,MAAM;YACN,KAAK;YACL,WAAW;gBACT,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,UAAU,EAAE;oBAC7C,IAAI,CAAC,OAAO,CAAC,GAAa,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC9D;YACH,CAAC;YACD,QAAQ,CAAC,KAA6B;gBACpC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC;SACF,CAAC;KACH;AACH,CAAC,CAAC;AAEN,MAAM,cAAc,GAChB,CAAC,OAA4B,EAAE,KAAa,EAAE,IAAiB,EAAE,EAAE;IAChE,KAAK,CAAC,WAAsC;SACxC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC;AAEN;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,QAAQ,CAAC,OAA6B;IACpD,4CAA4C;IAC5C,OAAO,CAAC,iBAAsC,EAAE,IAAkB,EAAO,EAAE,CAChE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;QAC7B,cAAc,CAAC,OAAQ,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;QAC7D,gBAAgB,CAAC,OAAQ,EAAE,iBAAiC,CAAC,CAAC;AACpE,CAAC;AAWD;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAqC;IACpE,OAAO,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC;AACvE,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,KAAK,CAAC,QAAgB,EAAE,KAAe;IACrD,OAAO,CAAC,iBAAsC;IACtC,4CAA4C;IAC5C,IAAkB,EAAO,EAAE;QACjC,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,IAAI,KAAK,EAAE;YACT,MAAM,GAAG,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC9D,UAAU,CAAC,GAAG,GAAG;gBACf,IAAK,IACgC,CAAC,GAAa,CAAC,KAAK,SAAS,EAAE;oBAClE,CAAE,IAAmD,CAAC,GAAa,CAAC;wBAC/D,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC/C;gBACD,OACI,IAAmD,CAAC,GAAa,CAAC,CAAC;YACzE,CAAC,CAAC;SACH;QACD,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,WAAW,CAAC,UAAU,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,aAAa,CAAC,UAAU,EAAE,iBAAiC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAED,4EAA4E;AAC5E,4EAA4E;AAC5E,sEAAsE;AACtE,wEAAwE;AACxE,wCAAwC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,UAAU,UAAU,CAAC,QAAgB;IACzC,OAAO,CAAC,iBAAsC;IACtC,4CAA4C;IAC5C,IAAkB,EAAO,EAAE;QACjC,MAAM,UAAU,GAAG;YACjB,KAAK,CAAC,GAAG;gBACP,MAAM,IAAI,CAAC,cAAc,CAAC;gBAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACjD,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,WAAW,CAAC,UAAU,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,aAAa,CAAC,UAAU,EAAE,iBAAiC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,UAAU,QAAQ,CAAC,QAAgB;IACvC,OAAO,CAAC,iBAAsC;IACtC,4CAA4C;IAC5C,IAAkB,EAAO,EAAE;QACjC,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACpD,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,WAAW,CAAC,UAAU,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,aAAa,CAAC,UAAU,EAAE,iBAAiC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,WAAW,GACb,CAAC,UAA8B,EAAE,KAAa,EAAE,IAAiB,EAAE,EAAE;IACnE,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AACjD,CAAC,CAAC;AAEN,MAAM,aAAa,GAAG,CAAC,UAA8B,EAAE,OAAqB,EAAE,EAAE,CAC5E,CAAC;IACC,IAAI,EAAE,QAAQ;IACd,SAAS,EAAE,WAAW;IACtB,GAAG,EAAE,OAAO,CAAC,GAAG;IAChB,UAAU;CACX,CAAC,CAAC;AAEP,MAAM,oBAAoB,GACtB,CAAC,OAAgC,EAAE,OAAqB,EAAE,EAAE;IAC1D,uCACK,OAAO,KACV,QAAQ,CAAC,KAA6B;YACpC,MAAM,CAAC,MAAM,CACT,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,GAA4B,CAAC,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC,IACD;AACJ,CAAC,CAAC;AAEN,MAAM,kBAAkB;AACpB,mDAAmD;AACnD,CAAC,OAAgC,EAAE,KAAU,EAAE,IAAiB,EAAE,EAAE;IAClE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACtC,CAAC,CAAC;AAEN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,UAAU,YAAY,CAAC,OAAgC;IAC3D,wEAAwE;IACxE,4EAA4E;IAC5E,YAAY;IACZ,2EAA2E;IAC3E,aAAa;IACb,OAAO,CAAC,CAAC,iBAAsC,EAAE,IAAa,EAAE,EAAE,CACtD,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;QACtB,kBAAkB,CAAC,OAAO,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;QAChE,oBAAoB,CAChB,OAAO,EAAE,iBAAiC,CAAC,CAE7C,CAAC;AACjB,CAAC;AAED,gCAAgC;AAChC,kCAAkC;AAClC,MAAM,YAAY,GAAG,OAAO,CAAC,SAAgB,CAAC;AAC9C,MAAM,aAAa,GACf,YAAY,CAAC,iBAAiB,IAAI,YAAY,CAAC,qBAAqB,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,kBAAkB,CAC9B,QAAQ,GAAG,EAAE,EAAE,OAAO,GAAG,KAAK,EAAE,QAAQ,GAAG,EAAE;IAC/C,OAAO,CAAC,iBAAsC;IACtC,4CAA4C;IAC5C,IAAkB,EAAO,EAAE;QACjC,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,MAAM,YAAY,GACd,OAAO,QAAQ,CAAC,CAAC,CAAC,SAAS,QAAQ,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;gBAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gBACzD,IAAI,KAAK,GAAG,IAAI,IAAK,IAAwB,CAAC,aAAa,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;gBACvE,IAAI,KAAK,IAAI,QAAQ,EAAE;oBACrB,KAAK,GAAG,KAAK,CAAC,MAAM,CAChB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY;wBACzC,sEAAsE;wBACtE,CAAE,IAAY,CAAC,OAAO,CAAC,CAAC;4BAClB,IAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACrC,aAAa,CAAC,IAAI,CAAC,IAAe,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;iBAC9D;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,WAAW,CAAC,UAAU,EAAE,iBAA2B,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,aAAa,CAAC,UAAU,EAAE,iBAAiC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n/*\r\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\r\n * property decorators (but not class decorators) in this file that have\r\n * an @ExportDecoratedItems annotation must be defined as a regular function,\r\n * not an arrow function.\r\n */\r\n\r\nimport {LitElement} from '../lit-element.js';\r\n\r\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\r\n\r\nexport type Constructor<T> = {\r\n  // tslint:disable-next-line:no-any\r\n  new (...args: any[]): T\r\n};\r\n\r\n// From the TC39 Decorators proposal\r\ninterface ClassDescriptor {\r\n  kind: 'class';\r\n  elements: ClassElement[];\r\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\r\n}\r\n\r\n// From the TC39 Decorators proposal\r\ninterface ClassElement {\r\n  kind: 'field'|'method';\r\n  key: PropertyKey;\r\n  placement: 'static'|'prototype'|'own';\r\n  initializer?: Function;\r\n  extras?: ClassElement[];\r\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\r\n  descriptor?: PropertyDescriptor;\r\n}\r\n\r\nconst legacyCustomElement =\r\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\r\n      window.customElements.define(tagName, clazz);\r\n      // Cast as any because TS doesn't recognize the return type as being a\r\n      // subtype of the decorated class when clazz is typed as\r\n      // `Constructor<HTMLElement>` for some reason.\r\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\r\n      // applied to elements however.\r\n      // tslint:disable-next-line:no-any\r\n      return clazz as any;\r\n    };\r\n\r\nconst standardCustomElement =\r\n    (tagName: string, descriptor: ClassDescriptor) => {\r\n      const {kind, elements} = descriptor;\r\n      return {\r\n        kind,\r\n        elements,\r\n        // This callback is called once the class is otherwise fully defined\r\n        finisher(clazz: Constructor<HTMLElement>) {\r\n          window.customElements.define(tagName, clazz);\r\n        }\r\n      };\r\n    };\r\n\r\n/**\r\n * Class decorator factory that defines the decorated class as a custom element.\r\n *\r\n * ```\r\n * @customElement('my-element')\r\n * class MyElement {\r\n *   render() {\r\n *     return html``;\r\n *   }\r\n * }\r\n * ```\r\n * @category Decorator\r\n * @param tagName The name of the custom element to define.\r\n */\r\nexport const customElement = (tagName: string) =>\r\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\r\n        (typeof classOrDescriptor === 'function') ?\r\n    legacyCustomElement(tagName, classOrDescriptor) :\r\n    standardCustomElement(tagName, classOrDescriptor);\r\n\r\nconst standardProperty =\r\n    (options: PropertyDeclaration, element: ClassElement) => {\r\n      // When decorating an accessor, pass it through and add property metadata.\r\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\r\n      // stomp over the user's accessor.\r\n      if (element.kind === 'method' && element.descriptor &&\r\n          !('value' in element.descriptor)) {\r\n        return {\r\n          ...element,\r\n          finisher(clazz: typeof UpdatingElement) {\r\n            clazz.createProperty(element.key, options);\r\n          }\r\n        };\r\n      } else {\r\n        // createProperty() takes care of defining the property, but we still\r\n        // must return some kind of descriptor, so return a descriptor for an\r\n        // unused prototype field. The finisher calls createProperty().\r\n        return {\r\n          kind: 'field',\r\n          key: Symbol(),\r\n          placement: 'own',\r\n          descriptor: {},\r\n          // When @babel/plugin-proposal-decorators implements initializers,\r\n          // do this instead of the initializer below. See:\r\n          // https://github.com/babel/babel/issues/9260 extras: [\r\n          //   {\r\n          //     kind: 'initializer',\r\n          //     placement: 'own',\r\n          //     initializer: descriptor.initializer,\r\n          //   }\r\n          // ],\r\n          initializer(this: {[key: string]: unknown}) {\r\n            if (typeof element.initializer === 'function') {\r\n              this[element.key as string] = element.initializer.call(this);\r\n            }\r\n          },\r\n          finisher(clazz: typeof UpdatingElement) {\r\n            clazz.createProperty(element.key, options);\r\n          }\r\n        };\r\n      }\r\n    };\r\n\r\nconst legacyProperty =\r\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\r\n      (proto.constructor as typeof UpdatingElement)\r\n          .createProperty(name, options);\r\n    };\r\n\r\n/**\r\n * A property decorator which creates a LitElement property which reflects a\r\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\r\n * supplied to configure property features.\r\n *\r\n * This decorator should only be used for public fields. Private or protected\r\n * fields should use the [[`internalProperty`]] decorator.\r\n *\r\n * @example\r\n * ```ts\r\n * class MyElement {\r\n *   @property({ type: Boolean })\r\n *   clicked = false;\r\n * }\r\n * ```\r\n * @category Decorator\r\n * @ExportDecoratedItems\r\n */\r\nexport function property(options?: PropertyDeclaration) {\r\n  // tslint:disable-next-line:no-any decorator\r\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\r\n             (name !== undefined) ?\r\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\r\n      standardProperty(options!, protoOrDescriptor as ClassElement);\r\n}\r\n\r\nexport interface InternalPropertyDeclaration<Type = unknown> {\r\n  /**\r\n   * A function that indicates if a property should be considered changed when\r\n   * it is set. The function should take the `newValue` and `oldValue` and\r\n   * return `true` if an update should be requested.\r\n   */\r\n  hasChanged?(value: Type, oldValue: Type): boolean;\r\n}\r\n\r\n/**\r\n * Declares a private or protected property that still triggers updates to the\r\n * element when it changes.\r\n *\r\n * Properties declared this way must not be used from HTML or HTML templating\r\n * systems, they're solely for properties internal to the element. These\r\n * properties may be renamed by optimization tools like closure compiler.\r\n * @category Decorator\r\n */\r\nexport function internalProperty(options?: InternalPropertyDeclaration) {\r\n  return property({attribute: false, hasChanged: options?.hasChanged});\r\n}\r\n\r\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * executes a querySelector on the element's renderRoot.\r\n *\r\n * @param selector A DOMString containing one or more selectors to match.\r\n * @param cache An optional boolean which when true performs the DOM query only\r\n * once and caches the result.\r\n *\r\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\r\n *\r\n * @example\r\n *\r\n * ```ts\r\n * class MyElement {\r\n *   @query('#first')\r\n *   first;\r\n *\r\n *   render() {\r\n *     return html`\r\n *       <div id=\"first\"></div>\r\n *       <div id=\"second\"></div>\r\n *     `;\r\n *   }\r\n * }\r\n * ```\r\n * @category Decorator\r\n */\r\nexport function query(selector: string, cache?: boolean) {\r\n  return (protoOrDescriptor: Object|ClassElement,\r\n          // tslint:disable-next-line:no-any decorator\r\n          name?: PropertyKey): any => {\r\n    const descriptor = {\r\n      get(this: LitElement) {\r\n        return this.renderRoot.querySelector(selector);\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    };\r\n    if (cache) {\r\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\r\n      descriptor.get = function(this: LitElement) {\r\n        if ((this as unknown as\r\n             {[key: string]: Element | null})[key as string] === undefined) {\r\n          ((this as unknown as {[key: string]: Element | null})[key as string] =\r\n               this.renderRoot.querySelector(selector));\r\n        }\r\n        return (\r\n            this as unknown as {[key: string]: Element | null})[key as string];\r\n      };\r\n    }\r\n    return (name !== undefined) ?\r\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\r\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\r\n  };\r\n}\r\n\r\n// Note, in the future, we may extend this decorator to support the use case\r\n// where the queried element may need to do work to become ready to interact\r\n// with (e.g. load some implementation code). If so, we might elect to\r\n// add a second argument defining a function that can be run to make the\r\n// queried element loaded/updated/ready.\r\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * returns a promise that resolves to the result of a querySelector on the\r\n * element's renderRoot done after the element's `updateComplete` promise\r\n * resolves. When the queried property may change with element state, this\r\n * decorator can be used instead of requiring users to await the\r\n * `updateComplete` before accessing the property.\r\n *\r\n * @param selector A DOMString containing one or more selectors to match.\r\n *\r\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\r\n *\r\n * @example\r\n * ```ts\r\n * class MyElement {\r\n *   @queryAsync('#first')\r\n *   first;\r\n *\r\n *   render() {\r\n *     return html`\r\n *       <div id=\"first\"></div>\r\n *       <div id=\"second\"></div>\r\n *     `;\r\n *   }\r\n * }\r\n *\r\n * // external usage\r\n * async doSomethingWithFirst() {\r\n *  (await aMyElement.first).doSomething();\r\n * }\r\n * ```\r\n * @category Decorator\r\n */\r\nexport function queryAsync(selector: string) {\r\n  return (protoOrDescriptor: Object|ClassElement,\r\n          // tslint:disable-next-line:no-any decorator\r\n          name?: PropertyKey): any => {\r\n    const descriptor = {\r\n      async get(this: LitElement) {\r\n        await this.updateComplete;\r\n        return this.renderRoot.querySelector(selector);\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    };\r\n    return (name !== undefined) ?\r\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\r\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\r\n  };\r\n}\r\n\r\n/**\r\n * A property decorator that converts a class property into a getter\r\n * that executes a querySelectorAll on the element's renderRoot.\r\n *\r\n * @param selector A DOMString containing one or more selectors to match.\r\n *\r\n * See:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\r\n *\r\n * @example\r\n * ```ts\r\n * class MyElement {\r\n *   @queryAll('div')\r\n *   divs;\r\n *\r\n *   render() {\r\n *     return html`\r\n *       <div id=\"first\"></div>\r\n *       <div id=\"second\"></div>\r\n *     `;\r\n *   }\r\n * }\r\n * ```\r\n * @category Decorator\r\n */\r\nexport function queryAll(selector: string) {\r\n  return (protoOrDescriptor: Object|ClassElement,\r\n          // tslint:disable-next-line:no-any decorator\r\n          name?: PropertyKey): any => {\r\n    const descriptor = {\r\n      get(this: LitElement) {\r\n        return this.renderRoot.querySelectorAll(selector);\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    };\r\n    return (name !== undefined) ?\r\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\r\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\r\n  };\r\n}\r\n\r\nconst legacyQuery =\r\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\r\n      Object.defineProperty(proto, name, descriptor);\r\n    };\r\n\r\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\r\n    ({\r\n      kind: 'method',\r\n      placement: 'prototype',\r\n      key: element.key,\r\n      descriptor,\r\n    });\r\n\r\nconst standardEventOptions =\r\n    (options: AddEventListenerOptions, element: ClassElement) => {\r\n      return {\r\n        ...element,\r\n        finisher(clazz: typeof UpdatingElement) {\r\n          Object.assign(\r\n              clazz.prototype[element.key as keyof UpdatingElement], options);\r\n        }\r\n      };\r\n    };\r\n\r\nconst legacyEventOptions =\r\n    // tslint:disable-next-line:no-any legacy decorator\r\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\r\n      Object.assign(proto[name], options);\r\n    };\r\n\r\n/**\r\n * Adds event listener options to a method used as an event listener in a\r\n * lit-html template.\r\n *\r\n * @param options An object that specifies event listener options as accepted by\r\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\r\n *\r\n * Current browsers support the `capture`, `passive`, and `once` options. See:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\r\n *\r\n * @example\r\n * ```ts\r\n * class MyElement {\r\n *   clicked = false;\r\n *\r\n *   render() {\r\n *     return html`\r\n *       <div @click=${this._onClick}`>\r\n *         <button></button>\r\n *       </div>\r\n *     `;\r\n *   }\r\n *\r\n *   @eventOptions({capture: true})\r\n *   _onClick(e) {\r\n *     this.clicked = true;\r\n *   }\r\n * }\r\n * ```\r\n * @category Decorator\r\n */\r\nexport function eventOptions(options: AddEventListenerOptions) {\r\n  // Return value typed as any to prevent TypeScript from complaining that\r\n  // standard decorator function signature does not match TypeScript decorator\r\n  // signature\r\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\r\n  // the others\r\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\r\n              (name !== undefined) ?\r\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\r\n              standardEventOptions(\r\n                  options, protoOrDescriptor as ClassElement)) as\r\n             // tslint:disable-next-line:no-any decorator\r\n             any;\r\n}\r\n\r\n// x-browser support for matches\r\n// tslint:disable-next-line:no-any\r\nconst ElementProto = Element.prototype as any;\r\nconst legacyMatches =\r\n    ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\r\n\r\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\r\n * this property should be annotated as `NodeListOf<HTMLElement>`.\r\n *\r\n * @param slotName A string name of the slot.\r\n * @param flatten A boolean which when true flattens the assigned nodes,\r\n * meaning any assigned nodes that are slot elements are replaced with their\r\n * assigned nodes.\r\n * @param selector A string which filters the results to elements that match\r\n * the given css selector.\r\n *\r\n * * @example\r\n * ```ts\r\n * class MyElement {\r\n *   @queryAssignedNodes('list', true, '.item')\r\n *   listItems;\r\n *\r\n *   render() {\r\n *     return html`\r\n *       <slot name=\"list\"></slot>\r\n *     `;\r\n *   }\r\n * }\r\n * ```\r\n * @category Decorator\r\n */\r\nexport function queryAssignedNodes(\r\n    slotName = '', flatten = false, selector = '') {\r\n  return (protoOrDescriptor: Object|ClassElement,\r\n          // tslint:disable-next-line:no-any decorator\r\n          name?: PropertyKey): any => {\r\n    const descriptor = {\r\n      get(this: LitElement) {\r\n        const slotSelector =\r\n            `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\r\n        const slot = this.renderRoot.querySelector(slotSelector);\r\n        let nodes = slot && (slot as HTMLSlotElement).assignedNodes({flatten});\r\n        if (nodes && selector) {\r\n          nodes = nodes.filter(\r\n              (node) => node.nodeType === Node.ELEMENT_NODE &&\r\n                  // tslint:disable-next-line:no-any testing existence on older browsers\r\n                  ((node as any).matches ?\r\n                       (node as Element).matches(selector) :\r\n                       legacyMatches.call(node as Element, selector)));\r\n        }\r\n        return nodes;\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    };\r\n    return (name !== undefined) ?\r\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\r\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\r\n  };\r\n}\r\n"]}