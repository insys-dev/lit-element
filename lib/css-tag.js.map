{"version":3,"file":"css-tag.js","sourceRoot":"","sources":["../src/lib/css-tag.ts"],"names":[],"mappings":"AAAA;;;;;;;;;EASE;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;IAC1D,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;IAC/D,CAAC,oBAAoB,IAAI,QAAQ,CAAC,SAAS,CAAC;IAC5C,CAAC,SAAS,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC;AAE3C,MAAM,iBAAiB,GAAG,MAAM,EAAE,CAAC;AAEnC,MAAM,OAAO,SAAS;IAKpB,YAAY,OAAe,EAAE,SAAiB;QAC5C,IAAI,SAAS,KAAK,iBAAiB,EAAE;YACnC,MAAM,IAAI,KAAK,CACX,mEAAmE,CAAC,CAAC;SAC1E;QAED,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,oEAAoE;IACpE,wEAAwE;IACxE,IAAI,UAAU;QACZ,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,gEAAgE;YAChE,kCAAkC;YAClC,IAAI,2BAA2B,EAAE;gBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,aAAa,EAAE,CAAC;gBACvC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC5C;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;SACF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAc,EAAE,EAAE;IAC1C,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,iBAAiB,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,KAAuB,EAAE,EAAE;IACpD,IAAI,KAAK,YAAY,SAAS,EAAE;QAC9B,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QACpC,OAAO,KAAK,CAAC;KACd;SAAM;QACL,MAAM,IAAI,KAAK,CACX,mEACI,KAAK;+CAC8B,CAAC,CAAC;KAC9C;AACH,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,GAAG,GACZ,CAAC,OAA6B,EAAE,GAAG,MAA4B,EAAE,EAAE;IACjE,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CACzB,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,EAC9D,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["/**\r\n@license\r\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at\r\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\r\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\r\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\r\npart of the polymer project is also subject to an additional IP rights grant\r\nfound at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Whether the current browser supports `adoptedStyleSheets`.\r\n */\r\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\r\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\r\n    ('adoptedStyleSheets' in Document.prototype) &&\r\n    ('replace' in CSSStyleSheet.prototype);\r\n\r\nconst constructionToken = Symbol();\r\n\r\nexport class CSSResult {\r\n  _styleSheet?: CSSStyleSheet|null;\r\n\r\n  readonly cssText: string;\r\n\r\n  constructor(cssText: string, safeToken: symbol) {\r\n    if (safeToken !== constructionToken) {\r\n      throw new Error(\r\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\r\n    }\r\n\r\n    this.cssText = cssText;\r\n  }\r\n\r\n  // Note, this is a getter so that it's lazy. In practice, this means\r\n  // stylesheets are not created until the first element instance is made.\r\n  get styleSheet(): CSSStyleSheet|null {\r\n    if (this._styleSheet === undefined) {\r\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\r\n      // CSSStyleSheet is constructable.\r\n      if (supportsAdoptingStyleSheets) {\r\n        this._styleSheet = new CSSStyleSheet();\r\n        this._styleSheet.replaceSync(this.cssText);\r\n      } else {\r\n        this._styleSheet = null;\r\n      }\r\n    }\r\n    return this._styleSheet;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.cssText;\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\r\n *\r\n * This is unsafe because untrusted CSS text can be used to phone home\r\n * or exfiltrate data to an attacker controlled site. Take care to only use\r\n * this with trusted input.\r\n */\r\nexport const unsafeCSS = (value: unknown) => {\r\n  return new CSSResult(String(value), constructionToken);\r\n};\r\n\r\nconst textFromCSSResult = (value: CSSResult|number) => {\r\n  if (value instanceof CSSResult) {\r\n    return value.cssText;\r\n  } else if (typeof value === 'number') {\r\n    return value;\r\n  } else {\r\n    throw new Error(\r\n        `Value passed to 'css' function must be a 'css' function result: ${\r\n            value}. Use 'unsafeCSS' to pass non-literal values, but\r\n            take care to ensure page security.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Template tag which which can be used with LitElement's [[LitElement.styles |\r\n * `styles`]] property to set element styles. For security reasons, only literal\r\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\r\n * may be used inside a template string part.\r\n */\r\nexport const css =\r\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\r\n      const cssText = values.reduce(\r\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\r\n          strings[0]);\r\n      return new CSSResult(cssText, constructionToken);\r\n    };\r\n"]}