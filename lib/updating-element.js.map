{"version":3,"file":"updating-element.js","sourceRoot":"","sources":["../src/lib/updating-element.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,MAAM,CAAC;AACrD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;;;GAIG;AAEH;;;;;GAKG;AACH,MAAM,CAAC,yBAAyB;IAC5B,CAAwB,IAAO,EAAE,IAAa,EAAK,EAAE,CAAC,IAAI,CAAC;AAqH/D,MAAM,CAAC,MAAM,gBAAgB,GAA8B;IAEzD,WAAW,CAAC,KAAc,EAAE,IAAc;QACxC,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO;gBACV,OAAO,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3B,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK;gBACR,0DAA0D;gBAC1D,wCAAwC;gBACxC,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACxD;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,aAAa,CAAC,KAAkB,EAAE,IAAc;QAC9C,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO;gBACV,OAAO,KAAK,KAAK,IAAI,CAAC;YACxB,KAAK,MAAM;gBACT,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/C,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK;gBACR,uEAAuE;gBACvE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAM,CAAY,CAAC;SACxC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CAEF,CAAC;AAMF;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAe,CAAC,KAAc,EAAE,GAAY,EAAW,EAAE;IAC5E,2DAA2D;IAC3D,OAAO,GAAG,KAAK,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,KAAK,KAAK,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,0BAA0B,GAAwB;IACtD,SAAS,EAAE,IAAI;IACf,IAAI,EAAE,MAAM;IACZ,SAAS,EAAE,gBAAgB;IAC3B,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,QAAQ;CACrB,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAM,sBAAsB,GAAG,CAAC,IAAI,CAAC,CAAC;AACtC,MAAM,gCAAgC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChD,MAAM,+BAA+B,GAAG,CAAC,IAAI,CAAC,CAAC;AAK/C;;;;;GAKG;AACH,MAAM,SAAS,GAAG,WAAW,CAAC;AAE9B,MAAM,CAAC,MAAM,oBAAoB,GAAG,UAAS,UAA8B;;IAG3E;;;;;OAKG;IACH,YAAO,KAAM,SAAQ,UAAU;YAyT7B;gBACE,KAAK,EAAE,CAAC;gBACR,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;YA1RD;;;eAGG;YACH,MAAM,KAAK,kBAAkB;gBAC3B,yDAAyD;gBACzD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,MAAM,UAAU,GAAa,EAAE,CAAC;gBAChC,2EAA2E;gBAC3E,mBAAmB;gBACnB,IAAI,CAAC,gBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBACtC,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAClD,IAAI,IAAI,KAAK,SAAS,EAAE;wBACtB,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBAC1C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACvB;gBACH,CAAC,CAAC,CAAC;gBACH,OAAO,UAAU,CAAC;YACpB,CAAC;YAED;;;;eAIG;YACH,2BAA2B;YAC3B,MAAM,CAAC,sBAAsB;gBAC3B,oDAAoD;gBACpD,IAAI,CAAC,IAAI,CAAC,cAAc,CAChB,yBAAyB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,EAAE;oBAC5D,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;oBAClC,iEAAiE;oBACjE,MAAM,eAAe,GACjB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC;oBACjD,IAAI,eAAe,KAAK,SAAS,EAAE;wBACjC,eAAe,CAAC,OAAO,CACnB,CAAC,CAAsB,EAAE,CAAc,EAAE,EAAE,CACvC,IAAI,CAAC,gBAAiB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC3C;iBACF;YACH,CAAC;YAED;;;;;;;;;;;;;;;;;;;;;eAqBG;YACH,MAAM,CAAC,cAAc,CACjB,IAAiB,EACjB,UAA+B,0BAA0B;gBAC3D,oEAAoE;gBACpE,qEAAqE;gBACrE,YAAY;gBACZ,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,IAAI,CAAC,gBAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC1C,sEAAsE;gBACtE,2EAA2E;gBAC3E,mEAAmE;gBACnE,yEAAyE;gBACzE,qBAAqB;gBACrB,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;oBAC7D,OAAO;iBACR;gBACD,MAAM,GAAG,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC9D,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;gBAClE,IAAI,UAAU,KAAK,SAAS,EAAE;oBAC5B,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;iBACzD;YACH,CAAC;YAED;;;;;;;;;;;;;;;;;;;;;;;;eAwBG;YACH,MAAM,CAAC,qBAAqB,CACxB,IAAiB,EAAE,GAAkB,EAAE,OAA4B;gBACrE,OAAO;oBACL,qDAAqD;oBACrD,GAAG;wBACD,OAAQ,IAAiC,CAAC,GAAa,CAAC,CAAC;oBAC3D,CAAC;oBACD,GAAG,CAAwB,KAAc;wBACvC,MAAM,QAAQ,GACT,IAAuC,CAAC,IAAc,CAAC,CAAC;wBAC5D,IAAuC,CAAC,GAAa,CAAC,GAAG,KAAK,CAAC;wBAC/D,IAAmC;6BAC/B,qBAAqB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACtD,CAAC;oBACD,YAAY,EAAE,IAAI;oBAClB,UAAU,EAAE,IAAI;iBACjB,CAAC;YACJ,CAAC;YAED;;;;;;;;;;;;eAYG;YACH,MAAM,CAAC,kBAAkB,CAAC,IAAiB;gBACzC,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC;oBAC3D,0BAA0B,CAAC;YACjC,CAAC;YAED;;;;;eAKG;YACH,MAAM,CAAC,QAAQ;gBACb,4BAA4B;gBAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC9C,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;oBACxC,SAAS,CAAC,QAAQ,EAAE,CAAC;iBACtB;gBACD,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,iDAAiD;gBACjD,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,EAAE,CAAC;gBACzC,sBAAsB;gBACtB,sEAAsE;gBACtE,qEAAqE;gBACrE,2CAA2C;gBAC3C,IAAI,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,EAAE;oBACtE,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;oBAC9B,6DAA6D;oBAC7D,MAAM,QAAQ,GAAG;wBACf,GAAG,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC;wBACpC,GAAG,CAAC,OAAO,MAAM,CAAC,qBAAqB,KAAK,UAAU,CAAC,CAAC,CAAC;4BACrD,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;4BACrC,EAAE;qBACP,CAAC;oBACF,iDAAiD;oBACjD,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;wBACxB,uEAAuE;wBACvE,cAAc;wBACd,qDAAqD;wBACrD,IAAI,CAAC,cAAc,CAAC,CAAC,EAAG,KAAa,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC3C;iBACF;YACH,CAAC;YAED;;;;eAIG;YACH,MAAM,CAAC,yBAAyB,CAC5B,IAAiB,EAAE,OAA4B;gBACjD,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;gBACpC,OAAO,SAAS,KAAK,KAAK,CAAC,CAAC;oBACxB,SAAS,CAAC,CAAC;oBACX,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC;wBAC3B,SAAS,CAAC,CAAC;wBACX,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACxE,CAAC;YAED;;;;;;eAMG;YACH,MAAM,CAAC,gBAAgB,CACnB,KAAc,EAAE,GAAY,EAAE,aAAyB,QAAQ;gBACjE,OAAO,UAAU,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAChC,CAAC;YAED;;;;;;eAMG;YACH,MAAM,CAAC,2BAA2B,CAC9B,KAAkB,EAAE,OAA4B;gBAClD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC1B,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,gBAAgB,CAAC;gBACxD,MAAM,aAAa,GACf,CAAC,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;gBAC5E,OAAO,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC5D,CAAC;YAED;;;;;;;;eAQG;YACH,MAAM,CAAC,yBAAyB,CAC5B,KAAc,EAAE,OAA4B;gBAC9C,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;oBACjC,OAAO;iBACR;gBACD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;gBAC1B,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;gBACpC,MAAM,WAAW,GACb,SAAS,IAAK,SAAuC,CAAC,WAAW;oBACjE,gBAAgB,CAAC,WAAW,CAAC;gBACjC,OAAO,WAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC;YAiCD;;;;eAIG;YACH,UAAU;gBACR,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,cAAc;oBACf,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC;gBAC7D,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;gBACpC,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAC/B,4DAA4D;gBAC5D,mBAAmB;gBACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAE7B,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;YACpC,CAAC;YAED;;;;;;;;;;;;eAYG;YACH,uBAAuB;gBACrB,2EAA2E;gBAC3E,mBAAmB;gBAClB,IAAI,CAAC,WAAsC;qBACvC,gBAAiB,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;wBAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,CAAe,CAAC,CAAC;wBACpC,OAAO,IAAI,CAAC,CAAe,CAAC,CAAC;wBAC7B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;4BAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;yBACtC;wBACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;qBACxC;gBACH,CAAC,CAAC,CAAC;YACT,CAAC;YAED;;;eAGG;YACH,wBAAwB;gBACtB,2EAA2E;gBAC3E,mBAAmB;gBACnB,kCAAkC;gBAClC,IAAI,CAAC,mBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAE,IAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClE,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;YACvC,CAAC;YAED,iBAAiB;gBACf,uEAAuE;gBACvE,qBAAqB;gBACrB,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,CAAC;YAED,iBAAiB;YACjB,cAAc;gBACZ,IAAI,IAAI,CAAC,uBAAuB,KAAK,SAAS,EAAE;oBAC9C,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAC/B,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;iBAC1C;YACH,CAAC;YAED;;;;eAIG;YACH,oBAAoB;YACpB,CAAC;YAED;;eAEG;YACH,wBAAwB,CAAC,IAAY,EAAE,GAAgB,EAAE,KAAkB;gBACzE,IAAI,GAAG,KAAK,KAAK,EAAE;oBACjB,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACxC;YACH,CAAC;YAED,eAAe;YACf,oBAAoB,CAChB,IAAiB,EAAE,KAAc,EACjC,UAA+B,0BAA0B;gBAC3D,MAAM,IAAI,GAAI,IAAI,CAAC,WAAsC,CAAC;gBAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3D,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,MAAM,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oBACjE,oDAAoD;oBACpD,IAAI,SAAS,KAAK,SAAS,EAAE;wBAC3B,OAAO;qBACR;oBACD,oDAAoD;oBACpD,mEAAmE;oBACnE,wEAAwE;oBACxE,wEAAwE;oBACxE,iEAAiE;oBACjE,qEAAqE;oBACrE,+BAA+B;oBAC/B,wBAAwB;oBACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,gCAAgC,CAAC;oBACzE,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;qBAC5B;yBAAM;wBACL,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,SAAmB,CAAC,CAAC;qBAC9C;oBACD,4BAA4B;oBAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,gCAAgC,CAAC;iBAC3E;YACH,CAAC;YAED,eAAe;YACf,oBAAoB,CAAC,IAAY,EAAE,KAAkB;gBACnD,qEAAqE;gBACrE,mCAAmC;gBACnC,IAAI,IAAI,CAAC,YAAY,GAAG,gCAAgC,EAAE;oBACxD,OAAO;iBACR;gBACD,MAAM,IAAI,GAAI,IAAI,CAAC,WAAsC,CAAC;gBAC1D,sEAAsE;gBACtE,8DAA8D;gBAC9D,yDAAyD;gBACzD,MAAM,QAAQ,GAAI,IAAI,CAAC,uBAAwC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1E,IAAI,QAAQ,KAAK,SAAS,EAAE;oBAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;oBAClD,wBAAwB;oBACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,+BAA+B,CAAC;oBACxE,IAAI,CAAC,QAAsB,CAAC;wBACxB,kCAAkC;wBAClC,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,OAAO,CAAQ,CAAC;oBAC5D,4BAA4B;oBAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,+BAA+B,CAAC;iBAC1E;YACH,CAAC;YAED;;;;;eAKG;YACH,qBAAqB,CACjB,IAAkB,EAAE,QAAkB,EAAE,OAA6B;gBACvE,IAAI,mBAAmB,GAAG,IAAI,CAAC;gBAC/B,4DAA4D;gBAC5D,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAqC,CAAC;oBACxD,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBACnD,IAAI,IAAI,CAAC,gBAAgB,CACjB,IAAI,CAAC,IAAkB,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,EAAE;wBAC/D,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;4BACtC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;yBAC7C;wBACD,oCAAoC;wBACpC,iEAAiE;wBACjE,4DAA4D;wBAC5D,2CAA2C;wBAC3C,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI;4BACxB,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,+BAA+B,CAAC,EAAE;4BAC1D,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;gCAC5C,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,EAAE,CAAC;6BACxC;4BACD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;yBAC/C;qBACF;yBAAM;wBACL,sEAAsE;wBACtE,mBAAmB,GAAG,KAAK,CAAC;qBAC7B;iBACF;gBACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,mBAAmB,EAAE;oBACpD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;iBAC7C;YACH,CAAC;YAED;;;;;;;;;;;;eAYG;YACH,aAAa,CAAC,IAAkB,EAAE,QAAkB;gBAClD,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC3C,OAAO,IAAI,CAAC,cAAc,CAAC;YAC7B,CAAC;YAED;;;eAGG;YACH,KAAK,CAAC,cAAc;gBAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,sBAAsB,CAAC;gBAC/D,IAAI;oBACF,2DAA2D;oBAC3D,+DAA+D;oBAC/D,MAAM,IAAI,CAAC,cAAc,CAAC;iBAC3B;gBAAC,OAAO,CAAC,EAAE;oBACV,sEAAsE;oBACtE,mEAAmE;iBACpE;gBACD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACpC,qEAAqE;gBACrE,oEAAoE;gBACpE,uEAAuE;gBACvE,IAAI,MAAM,IAAI,IAAI,EAAE;oBAClB,MAAM,MAAM,CAAC;iBACd;gBACD,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC;YACnC,CAAC;YAED,eAAe;YACf,IAAI,mBAAmB;gBACrB,OAAO,CAAC,IAAI,CAAC,YAAY,GAAG,sBAAsB,CAAC,CAAC;YACtD,CAAC;YAED,iBAAiB;YACjB,IAAI,UAAU;gBACZ,OAAO,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,CAAC;YACjD,CAAC;YAED;;;;;;;;;;;;;;;;eAgBG;YACH,aAAa;gBACX,8DAA8D;gBAC9D,gEAAgE;gBAChE,cAAc;gBACd,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;oBAC7B,OAAO;iBACR;gBACD,iDAAiD;gBACjD,IAAI,IAAI,CAAC,mBAAmB,EAAE;oBAC5B,IAAI,CAAC,wBAAwB,EAAE,CAAC;iBACjC;gBACD,IAAI,YAAY,GAAG,KAAK,CAAC;gBACzB,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC;gBAClD,IAAI;oBACF,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;oBACpD,IAAI,YAAY,EAAE;wBAChB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;qBAChC;yBAAM;wBACL,IAAI,CAAC,YAAY,EAAE,CAAC;qBACrB;iBACF;gBAAC,OAAO,CAAC,EAAE;oBACV,oEAAoE;oBACpE,oBAAoB;oBACpB,YAAY,GAAG,KAAK,CAAC;oBACrB,mEAAmE;oBACnE,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,MAAM,CAAC,CAAC;iBACT;gBACD,IAAI,YAAY,EAAE;oBAChB,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,EAAE;wBAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC;wBAE1D,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;wBAC3D,oDAAoD;wBACpD,IAAG,UAAU,KAAK,SAAS,EAAE;4BAC3B,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;4BAExC,qGAAqG;4BACrG,aAAa,CAAC,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;gCAC7E,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;4BACvC,CAAC,CAAC,CAAC;yBACJ;6BACI;4BACH,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;yBACtC;qBACF;oBACD,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;iBACjC;YACH,CAAC;YAED,eAAe;YACf,YAAY;gBACV,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;gBACpC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,sBAAsB,CAAC;YAClE,CAAC;YAED;;;;;;;;;;;;;;eAcG;YACH,IAAI,cAAc;gBAChB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACnC,CAAC;YAED;;;;;;;;;;;;;;;;eAgBG;YACH,kBAAkB;gBAChB,OAAO,IAAI,CAAC,cAAc,CAAC;YAC7B,CAAC;YAED;;;;;;;eAOG;YACH,YAAY,CAAC,kBAAkC;gBAC7C,OAAO,IAAI,CAAC;YACd,CAAC;YAED;;;;;;;;eAQG;YACH,MAAM,CAAC,kBAAkC;gBACvC,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS;oBACxC,IAAI,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,EAAE;oBACvC,qEAAqE;oBACrE,yBAAyB;oBACzB,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACtE,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;iBACxC;gBACD,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;YAED;;;;;;;;;eASG;YACH,OAAO,CAAC,kBAAkC;YAC1C,CAAC;YAED;;;;;;;;;eASG;YACH,YAAY,CAAC,kBAAkC;YAC/C,CAAC;YAED,oBAAoB,CAAC,QAAgB;gBACnC,MAAM,QAAQ,GAAG,CAAC,GAAQ,EAAE,EAAE;oBAC5B,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC;wBAAE,OAAO,KAAK,CAAC,CAAC,6BAA6B;oBAC3F,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,mGAAmG;wBACtH,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAA,CAAC,2CAA2C;gBACxE,CAAC,CAAC;gBACF,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC5C,IAAG,QAAQ,CAAC,OAAO,CAAC;oBAAE,OAAO,CAAC,OAAQ,CAAC;gBACvC,MAAM,OAAO,GAAI,IAAY,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAG,QAAQ,CAAC,OAAO,CAAC;oBAAE,OAAO,CAAC,OAAQ,CAAC;;oBAClC,OAAO,SAAS,CAAC;YACxB,CAAC;SACF;aA/sBQ,SAAS;QAJhB;;;WAGG;QACG,MAAW,GAAG,IAAK;WA+sB1B;AAED,CAAC,CAAA;AAED,MAAM,OAAgB,eAAgB,SAAQ,oBAAoB,CAAC,WAAW,CAAC;CAAG","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\nimport { Subject, timer, combineLatest } from \"rxjs\";\r\nimport { first } from \"rxjs/operators\";\r\n\r\n/**\r\n * Use this module if you want to create your own base class extending\r\n * [[UpdatingElement]].\r\n * @packageDocumentation\r\n */\r\n\r\n/*\r\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\r\n * replaced at compile time by the munged name for object[property]. We cannot\r\n * alias this function, so we have to use a small shim that has the same\r\n * behavior when not compiling.\r\n */\r\nwindow.JSCompiler_renameProperty =\r\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\r\n\r\ndeclare global {\r\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\r\n      prop: P, _obj: unknown) => P;\r\n\r\n  interface Window {\r\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\r\n  }\r\n}\r\n\r\n/**\r\n * Converts property values to and from attribute values.\r\n */\r\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\r\n  /**\r\n   * Function called to convert an attribute value to a property\r\n   * value.\r\n   */\r\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\r\n\r\n  /**\r\n   * Function called to convert a property value to an attribute\r\n   * value.\r\n   *\r\n   * It returns unknown instead of string, to be compatible with\r\n   * https://github.com/WICG/trusted-types (and similar efforts).\r\n   */\r\n  toAttribute?(value: Type, type?: TypeHint): unknown;\r\n}\r\n\r\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\r\n    ComplexAttributeConverter<Type>|\r\n    ((value: string|null, type?: TypeHint) => Type);\r\n\r\n/**\r\n * Defines options for a property accessor.\r\n */\r\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\r\n  /**\r\n   * Indicates how and whether the property becomes an observed attribute.\r\n   * If the value is `false`, the property is not added to `observedAttributes`.\r\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\r\n   * becomes `foobar`). If a string, the string value is observed (e.g\r\n   * `attribute: 'foo-bar'`).\r\n   */\r\n  readonly attribute?: boolean|string;\r\n\r\n  /**\r\n   * Indicates the type of the property. This is used only as a hint for the\r\n   * `converter` to determine how to convert the attribute\r\n   * to/from a property.\r\n   */\r\n  readonly type?: TypeHint;\r\n\r\n  /**\r\n   * Indicates how to convert the attribute to/from a property. If this value\r\n   * is a function, it is used to convert the attribute value a the property\r\n   * value. If it's an object, it can have keys for `fromAttribute` and\r\n   * `toAttribute`. If no `toAttribute` function is provided and\r\n   * `reflect` is set to `true`, the property value is set directly to the\r\n   * attribute. A default `converter` is used if none is provided; it supports\r\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\r\n   * when a property changes and the converter is used to update the attribute,\r\n   * the property is never updated again as a result of the attribute changing,\r\n   * and vice versa.\r\n   */\r\n  readonly converter?: AttributeConverter<Type, TypeHint>;\r\n\r\n  /**\r\n   * Indicates if the property should reflect to an attribute.\r\n   * If `true`, when the property is set, the attribute is set using the\r\n   * attribute name determined according to the rules for the `attribute`\r\n   * property option and the value of the property converted using the rules\r\n   * from the `converter` property option.\r\n   */\r\n  readonly reflect?: boolean;\r\n\r\n  /**\r\n   * A function that indicates if a property should be considered changed when\r\n   * it is set. The function should take the `newValue` and `oldValue` and\r\n   * return `true` if an update should be requested.\r\n   */\r\n  hasChanged?(value: Type, oldValue: Type): boolean;\r\n\r\n  /**\r\n   * Indicates whether an accessor will be created for this property. By\r\n   * default, an accessor will be generated for this property that requests an\r\n   * update when set. If this flag is `true`, no accessor will be created, and\r\n   * it will be the user's responsibility to call\r\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\r\n   * the property changes.\r\n   */\r\n  readonly noAccessor?: boolean;\r\n}\r\n\r\n/**\r\n * Map of properties to PropertyDeclaration options. For each property an\r\n * accessor is made, and the property is processed according to the\r\n * PropertyDeclaration options.\r\n */\r\nexport interface PropertyDeclarations {\r\n  readonly [key: string]: PropertyDeclaration;\r\n}\r\n\r\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\r\n\r\ntype AttributeMap = Map<string, PropertyKey>;\r\n\r\n/**\r\n * Map of changed properties with old values. Takes an optional generic\r\n * interface corresponding to the declared element properties.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport type PropertyValues<T = any> =\r\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\r\n\r\nexport const defaultConverter: ComplexAttributeConverter = {\r\n\r\n  toAttribute(value: unknown, type?: unknown): unknown {\r\n    switch (type) {\r\n      case Boolean:\r\n        return value ? '' : null;\r\n      case Object:\r\n      case Array:\r\n        // if the value is `null` or `undefined` pass this through\r\n        // to allow removing/no change behavior.\r\n        return value == null ? value : JSON.stringify(value);\r\n    }\r\n    return value;\r\n  },\r\n\r\n  fromAttribute(value: string|null, type?: unknown) {\r\n    switch (type) {\r\n      case Boolean:\r\n        return value !== null;\r\n      case Number:\r\n        return value === null ? null : Number(value);\r\n      case Object:\r\n      case Array:\r\n        // Type assert to adhere to Bazel's \"must type assert JSON parse\" rule.\r\n        return JSON.parse(value!) as unknown;\r\n    }\r\n    return value;\r\n  }\r\n\r\n};\r\n\r\nexport interface HasChanged {\r\n  (value: unknown, old: unknown): boolean;\r\n}\r\n\r\n/**\r\n * Change function that returns true if `value` is different from `oldValue`.\r\n * This method is used as the default for a property's `hasChanged` function.\r\n */\r\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\r\n  // This ensures (old==NaN, value==NaN) always returns false\r\n  return old !== value && (old === old || value === value);\r\n};\r\n\r\nconst defaultPropertyDeclaration: PropertyDeclaration = {\r\n  attribute: true,\r\n  type: String,\r\n  converter: defaultConverter,\r\n  reflect: false,\r\n  hasChanged: notEqual\r\n};\r\n\r\nconst STATE_HAS_UPDATED = 1;\r\nconst STATE_UPDATE_REQUESTED = 1 << 2;\r\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\r\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\r\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\r\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\r\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\r\n\r\n/**\r\n * The Closure JS Compiler doesn't currently have good support for static\r\n * property semantics where \"this\" is dynamic (e.g.\r\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\r\n * this hack to bypass any rewriting by the compiler.\r\n */\r\nconst finalized = 'finalized';\r\n\r\nexport const UpdatingElementMixin = function(superclass: typeof HTMLElement) {\r\n\r\n\r\n/**\r\n * Base element class which manages element properties and attributes. When\r\n * properties change, the `update` method is asynchronously called. This method\r\n * should be supplied by subclassers to render updates as desired.\r\n * @noInheritDoc\r\n */\r\nreturn class extends superclass {\r\n  /*\r\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\r\n   * all static methods and properties with initializers.  Reference:\r\n   * - https://github.com/google/closure-compiler/issues/1776\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   * Maps attribute names to properties; for example `foobar` attribute to\r\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\r\n   * class.\r\n   */\r\n  static _attributeToPropertyMap: AttributeMap;\r\n\r\n  /**\r\n   * @protected\r\n   * Marks class as having finished creating properties.\r\n   */\r\n  static[finalized] = true;\r\n\r\n  /**\r\n   * @private\r\n   * Memoized list of all class properties, including any superclass properties.\r\n   * Created lazily on user subclasses when finalizing the class.\r\n   */\r\n  static _classProperties?: PropertyDeclarationMap;\r\n\r\n  /**\r\n   * User-supplied object that maps property names to `PropertyDeclaration`\r\n   * objects containing options for configuring the property.\r\n   */\r\n  static properties: PropertyDeclarations;\r\n\r\n  /**\r\n   * Returns a list of attributes corresponding to the registered properties.\r\n   * @nocollapse\r\n   */\r\n  static get observedAttributes() {\r\n    // note: piggy backing on this to ensure we're finalized.\r\n    this.finalize();\r\n    const attributes: string[] = [];\r\n    // Use forEach so this works even if for/of loops are compiled to for loops\r\n    // expecting arrays\r\n    this._classProperties!.forEach((v, p) => {\r\n      const attr = this._attributeNameForProperty(p, v);\r\n      if (attr !== undefined) {\r\n        this._attributeToPropertyMap.set(attr, p);\r\n        attributes.push(attr);\r\n      }\r\n    });\r\n    return attributes;\r\n  }\r\n\r\n  /**\r\n   * Ensures the private `_classProperties` property metadata is created.\r\n   * In addition to `finalize` this is also called in `createProperty` to\r\n   * ensure the `@property` decorator can add property metadata.\r\n   */\r\n  /** @nocollapse @private */\r\n  static _ensureClassProperties() {\r\n    // ensure private storage for property declarations.\r\n    if (!this.hasOwnProperty(\r\n            JSCompiler_renameProperty('_classProperties', this))) {\r\n      this._classProperties = new Map();\r\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\r\n      const superProperties: PropertyDeclarationMap =\r\n          Object.getPrototypeOf(this)._classProperties;\r\n      if (superProperties !== undefined) {\r\n        superProperties.forEach(\r\n            (v: PropertyDeclaration, k: PropertyKey) =>\r\n                this._classProperties!.set(k, v));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a property accessor on the element prototype if one does not exist\r\n   * and stores a PropertyDeclaration for the property with the given options.\r\n   * The property setter calls the property's `hasChanged` property option\r\n   * or uses a strict identity check to determine whether or not to request\r\n   * an update.\r\n   *\r\n   * This method may be overridden to customize properties; however,\r\n   * when doing so, it's important to call `super.createProperty` to ensure\r\n   * the property is setup correctly. This method calls\r\n   * `getPropertyDescriptor` internally to get a descriptor to install.\r\n   * To customize what properties do when they are get or set, override\r\n   * `getPropertyDescriptor`. To customize the options for a property,\r\n   * implement `createProperty` like this:\r\n   *\r\n   * static createProperty(name, options) {\r\n   *   options = Object.assign(options, {myOption: true});\r\n   *   super.createProperty(name, options);\r\n   * }\r\n   *\r\n   * @nocollapse\r\n   */\r\n  static createProperty(\r\n      name: PropertyKey,\r\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\r\n    // Note, since this can be called by the `@property` decorator which\r\n    // is called before `finalize`, we ensure storage exists for property\r\n    // metadata.\r\n    this._ensureClassProperties();\r\n    this._classProperties!.set(name, options);\r\n    // Do not generate an accessor if the prototype already has one, since\r\n    // it would be lost otherwise and that would never be the user's intention;\r\n    // Instead, we expect users to call `requestUpdate` themselves from\r\n    // user-defined accessors. Note that if the super has an accessor we will\r\n    // still overwrite it\r\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\r\n      return;\r\n    }\r\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\r\n    const descriptor = this.getPropertyDescriptor(name, key, options);\r\n    if (descriptor !== undefined) {\r\n      Object.defineProperty(this.prototype, name, descriptor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a property descriptor to be defined on the given named property.\r\n   * If no descriptor is returned, the property will not become an accessor.\r\n   * For example,\r\n   *\r\n   *   class MyElement extends LitElement {\r\n   *     static getPropertyDescriptor(name, key, options) {\r\n   *       const defaultDescriptor =\r\n   *           super.getPropertyDescriptor(name, key, options);\r\n   *       const setter = defaultDescriptor.set;\r\n   *       return {\r\n   *         get: defaultDescriptor.get,\r\n   *         set(value) {\r\n   *           setter.call(this, value);\r\n   *           // custom action.\r\n   *         },\r\n   *         configurable: true,\r\n   *         enumerable: true\r\n   *       }\r\n   *     }\r\n   *   }\r\n   *\r\n   * @nocollapse\r\n   * @protected\r\n   */\r\n  static getPropertyDescriptor(\r\n      name: PropertyKey, key: string|symbol, options: PropertyDeclaration) {\r\n    return {\r\n      // tslint:disable-next-line:no-any no symbol in index\r\n      get(): any {\r\n        return (this as {[key: string]: unknown})[key as string];\r\n      },\r\n      set(this: UpdatingElement, value: unknown) {\r\n        const oldValue =\r\n            (this as {} as {[key: string]: unknown})[name as string];\r\n        (this as {} as {[key: string]: unknown})[key as string] = value;\r\n        (this as unknown as UpdatingElement)\r\n            .requestUpdateInternal(name, oldValue, options);\r\n      },\r\n      configurable: true,\r\n      enumerable: true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the property options associated with the given property.\r\n   * These options are defined with a PropertyDeclaration via the `properties`\r\n   * object or the `@property` decorator and are registered in\r\n   * `createProperty(...)`.\r\n   *\r\n   * Note, this method should be considered \"final\" and not overridden. To\r\n   * customize the options for a given property, override `createProperty`.\r\n   *\r\n   * @nocollapse\r\n   * @final\r\n   * @protected\r\n   */\r\n  static getPropertyOptions(name: PropertyKey) {\r\n    return this._classProperties && this._classProperties.get(name) ||\r\n        defaultPropertyDeclaration;\r\n  }\r\n\r\n  /**\r\n   * Creates property accessors for registered properties and ensures\r\n   * any superclasses are also finalized.\r\n   * @nocollapse\r\n   * @protected\r\n   */\r\n  static finalize() {\r\n    // finalize any superclasses\r\n    const superCtor = Object.getPrototypeOf(this);\r\n    if (!superCtor.hasOwnProperty(finalized)) {\r\n      superCtor.finalize();\r\n    }\r\n    this[finalized] = true;\r\n    this._ensureClassProperties();\r\n    // initialize Map populated in observedAttributes\r\n    this._attributeToPropertyMap = new Map();\r\n    // make any properties\r\n    // Note, only process \"own\" properties since this element will inherit\r\n    // any properties defined on the superClass, and finalization ensures\r\n    // the entire prototype chain is finalized.\r\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\r\n      const props = this.properties;\r\n      // support symbols in properties (IE11 does not support this)\r\n      const propKeys = [\r\n        ...Object.getOwnPropertyNames(props),\r\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\r\n            Object.getOwnPropertySymbols(props) :\r\n            []\r\n      ];\r\n      // This for/of is ok because propKeys is an array\r\n      for (const p of propKeys) {\r\n        // note, use of `any` is due to TypeSript lack of support for symbol in\r\n        // index types\r\n        // tslint:disable-next-line:no-any no symbol in index\r\n        this.createProperty(p, (props as any)[p]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the property name for the given attribute `name`.\r\n   * @nocollapse\r\n   * @private\r\n   */\r\n  static _attributeNameForProperty(\r\n      name: PropertyKey, options: PropertyDeclaration) {\r\n    const attribute = options.attribute;\r\n    return attribute === false ?\r\n        undefined :\r\n        (typeof attribute === 'string' ?\r\n             attribute :\r\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\r\n  }\r\n\r\n  /**\r\n   * Returns true if a property should request an update.\r\n   * Called when a property value is set and uses the `hasChanged`\r\n   * option for the property if present or a strict identity check.\r\n   * @nocollapse\r\n   * @private\r\n   */\r\n  static _valueHasChanged(\r\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\r\n    return hasChanged(value, old);\r\n  }\r\n\r\n  /**\r\n   * Returns the property value for the given attribute value.\r\n   * Called via the `attributeChangedCallback` and uses the property's\r\n   * `converter` or `converter.fromAttribute` property option.\r\n   * @nocollapse\r\n   * @private\r\n   */\r\n  static _propertyValueFromAttribute(\r\n      value: string|null, options: PropertyDeclaration) {\r\n    const type = options.type;\r\n    const converter = options.converter || defaultConverter;\r\n    const fromAttribute =\r\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\r\n    return fromAttribute ? fromAttribute(value, type) : value;\r\n  }\r\n\r\n  /**\r\n   * Returns the attribute value for the given property value. If this\r\n   * returns undefined, the property will *not* be reflected to an attribute.\r\n   * If this returns null, the attribute will be removed, otherwise the\r\n   * attribute will be set to the value.\r\n   * This uses the property's `reflect` and `type.toAttribute` property options.\r\n   * @nocollapse\r\n   * @private\r\n   */\r\n  static _propertyValueToAttribute(\r\n      value: unknown, options: PropertyDeclaration) {\r\n    if (options.reflect === undefined) {\r\n      return;\r\n    }\r\n    const type = options.type;\r\n    const converter = options.converter;\r\n    const toAttribute =\r\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\r\n        defaultConverter.toAttribute;\r\n    return toAttribute!(value, type);\r\n  }\r\n\r\n  /** @private */\r\n  _updateState!: UpdateState;\r\n  /** @private */\r\n  _instanceProperties?: PropertyValues;\r\n  // Initialize to an unresolved Promise so we can make sure the element has\r\n  // connected before first update.\r\n  /** @private */\r\n  _updatePromise!: Promise<unknown>;\r\n  /** @private */\r\n  _enableUpdatingResolver: (() => void)|undefined;\r\n\r\n  /**\r\n   * Map with keys for any properties that have changed since the last\r\n   * update cycle with previous values.\r\n   */\r\n  /** @private */\r\n  _changedProperties!: PropertyValues;\r\n\r\n  /**\r\n   * Map with keys of properties that should be reflected when updated.\r\n   */\r\n  /** @private */\r\n  _reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\r\n\r\n  _$rerendered!: Subject<never>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Performs element initialization. By default captures any pre-set values for\r\n   * registered properties.\r\n   * @protected\r\n   */\r\n  initialize() {\r\n    this._updateState = 0;\r\n    this._updatePromise =\r\n        new Promise((res) => this._enableUpdatingResolver = res);\r\n    this._changedProperties = new Map();\r\n    this._saveInstanceProperties();\r\n    // ensures first update will be caught by an early access of\r\n    // `updateComplete`\r\n    this.requestUpdateInternal();\r\n\r\n    this._$rerendered = new Subject();\r\n  }\r\n\r\n  /**\r\n   * Fixes any properties set on the instance before upgrade time.\r\n   * Otherwise these would shadow the accessor and break these properties.\r\n   * The properties are stored in a Map which is played back after the\r\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\r\n   * (<=41), properties created for native platform properties like (`id` or\r\n   * `name`) may not have default values set in the element constructor. On\r\n   * these browsers native properties appear on instances and therefore their\r\n   * default value will overwrite any element default (e.g. if the element sets\r\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\r\n   * the native platform default).\r\n   * @private\r\n   */\r\n  _saveInstanceProperties() {\r\n    // Use forEach so this works even if for/of loops are compiled to for loops\r\n    // expecting arrays\r\n    (this.constructor as typeof UpdatingElement)\r\n        ._classProperties!.forEach((_v, p) => {\r\n          if (this.hasOwnProperty(p)) {\r\n            const value = this[p as keyof this];\r\n            delete this[p as keyof this];\r\n            if (!this._instanceProperties) {\r\n              this._instanceProperties = new Map();\r\n            }\r\n            this._instanceProperties.set(p, value);\r\n          }\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Applies previously saved instance properties.\r\n   * @private\r\n   */\r\n  _applyInstanceProperties() {\r\n    // Use forEach so this works even if for/of loops are compiled to for loops\r\n    // expecting arrays\r\n    // tslint:disable-next-line:no-any\r\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\r\n    this._instanceProperties = undefined;\r\n  }\r\n\r\n  connectedCallback() {\r\n    // Ensure first connection completes an update. Updates cannot complete\r\n    // before connection.\r\n    this.enableUpdating();\r\n  }\r\n\r\n  /** @protected */\r\n  enableUpdating() {\r\n    if (this._enableUpdatingResolver !== undefined) {\r\n      this._enableUpdatingResolver();\r\n      this._enableUpdatingResolver = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows for `super.disconnectedCallback()` in extensions while\r\n   * reserving the possibility of making non-breaking feature additions\r\n   * when disconnecting at some point in the future.\r\n   */\r\n  disconnectedCallback() {\r\n  }\r\n\r\n  /**\r\n   * Synchronizes property values when attributes change.\r\n   */\r\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\r\n    if (old !== value) {\r\n      this._attributeToProperty(name, value);\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _propertyToAttribute(\r\n      name: PropertyKey, value: unknown,\r\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\r\n    const ctor = (this.constructor as typeof UpdatingElement);\r\n    const attr = ctor._attributeNameForProperty(name, options);\r\n    if (attr !== undefined) {\r\n      const attrValue = ctor._propertyValueToAttribute(value, options);\r\n      // an undefined value does not change the attribute.\r\n      if (attrValue === undefined) {\r\n        return;\r\n      }\r\n      // Track if the property is being reflected to avoid\r\n      // setting the property again via `attributeChangedCallback`. Note:\r\n      // 1. this takes advantage of the fact that the callback is synchronous.\r\n      // 2. will behave incorrectly if multiple attributes are in the reaction\r\n      // stack at time of calling. However, since we process attributes\r\n      // in `update` this should not be possible (or an extreme corner case\r\n      // that we'd like to discover).\r\n      // mark state reflecting\r\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\r\n      if (attrValue == null) {\r\n        this.removeAttribute(attr);\r\n      } else {\r\n        this.setAttribute(attr, attrValue as string);\r\n      }\r\n      // mark state not reflecting\r\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _attributeToProperty(name: string, value: string|null) {\r\n    // Use tracking info to avoid deserializing attribute value if it was\r\n    // just set from a property setter.\r\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\r\n      return;\r\n    }\r\n    const ctor = (this.constructor as typeof UpdatingElement);\r\n    // Note, hint this as an `AttributeMap` so closure clearly understands\r\n    // the type; it has issues with tracking types through statics\r\n    // tslint:disable-next-line:no-unnecessary-type-assertion\r\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\r\n    if (propName !== undefined) {\r\n      const options = ctor.getPropertyOptions(propName);\r\n      // mark state reflecting\r\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\r\n      this[propName as keyof this] =\r\n          // tslint:disable-next-line:no-any\r\n          ctor._propertyValueFromAttribute(value, options) as any;\r\n      // mark state not reflecting\r\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This protected version of `requestUpdate` does not access or return the\r\n   * `updateComplete` promise. This promise can be overridden and is therefore\r\n   * not free to access.\r\n   * @protected\r\n   */\r\n  requestUpdateInternal(\r\n      name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration) {\r\n    let shouldRequestUpdate = true;\r\n    // If we have a property key, perform property update steps.\r\n    if (name !== undefined) {\r\n      const ctor = this.constructor as typeof UpdatingElement;\r\n      options = options || ctor.getPropertyOptions(name);\r\n      if (ctor._valueHasChanged(\r\n              this[name as keyof this], oldValue, options.hasChanged)) {\r\n        if (!this._changedProperties.has(name)) {\r\n          this._changedProperties.set(name, oldValue);\r\n        }\r\n        // Add to reflecting properties set.\r\n        // Note, it's important that every change has a chance to add the\r\n        // property to `_reflectingProperties`. This ensures setting\r\n        // attribute + property reflects correctly.\r\n        if (options.reflect === true &&\r\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\r\n          if (this._reflectingProperties === undefined) {\r\n            this._reflectingProperties = new Map();\r\n          }\r\n          this._reflectingProperties.set(name, options);\r\n        }\r\n      } else {\r\n        // Abort the request if the property should not be considered changed.\r\n        shouldRequestUpdate = false;\r\n      }\r\n    }\r\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\r\n      this._updatePromise = this._enqueueUpdate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Requests an update which is processed asynchronously. This should\r\n   * be called when an element should update based on some state not triggered\r\n   * by setting a property. In this case, pass no arguments. It should also be\r\n   * called when manually implementing a property setter. In this case, pass the\r\n   * property `name` and `oldValue` to ensure that any configured property\r\n   * options are honored. Returns the `updateComplete` Promise which is resolved\r\n   * when the update completes.\r\n   *\r\n   * @param name {PropertyKey} (optional) name of requesting property\r\n   * @param oldValue {any} (optional) old value of requesting property\r\n   * @returns {Promise} A Promise that is resolved when the update completes.\r\n   */\r\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\r\n    this.requestUpdateInternal(name, oldValue);\r\n    return this.updateComplete;\r\n  }\r\n\r\n  /**\r\n   * Sets up the element to asynchronously update.\r\n   * @private\r\n   */\r\n  async _enqueueUpdate() {\r\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\r\n    try {\r\n      // Ensure any previous update has resolved before updating.\r\n      // This `await` also ensures that property changes are batched.\r\n      await this._updatePromise;\r\n    } catch (e) {\r\n      // Ignore any previous errors. We only care that the previous cycle is\r\n      // done. Any error should have been handled in the previous update.\r\n    }\r\n    const result = this.performUpdate();\r\n    // If `performUpdate` returns a Promise, we await it. This is done to\r\n    // enable coordinating updates with a scheduler. Note, the result is\r\n    // checked to avoid delaying an additional microtask unless we need to.\r\n    if (result != null) {\r\n      await result;\r\n    }\r\n    return !this._hasRequestedUpdate;\r\n  }\r\n\r\n  /** @private */\r\n  get _hasRequestedUpdate() {\r\n    return (this._updateState & STATE_UPDATE_REQUESTED);\r\n  }\r\n\r\n  /** @protected */\r\n  get hasUpdated() {\r\n    return (this._updateState & STATE_HAS_UPDATED);\r\n  }\r\n\r\n  /**\r\n   * Performs an element update. Note, if an exception is thrown during the\r\n   * update, `firstUpdated` and `updated` will not be called.\r\n   *\r\n   * You can override this method to change the timing of updates. If this\r\n   * method is overridden, `super.performUpdate()` must be called.\r\n   *\r\n   * For instance, to schedule updates to occur just before the next frame:\r\n   *\r\n   * ```\r\n   * protected async performUpdate(): Promise<unknown> {\r\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\r\n   *   super.performUpdate();\r\n   * }\r\n   * ```\r\n   * @protected\r\n   */\r\n  performUpdate(): void|Promise<unknown> {\r\n    // Abort any update if one is not pending when this is called.\r\n    // This can happen if `performUpdate` is called early to \"flush\"\r\n    // the update.\r\n    if (!this._hasRequestedUpdate) {\r\n      return;\r\n    }\r\n    // Mixin instance properties once, if they exist.\r\n    if (this._instanceProperties) {\r\n      this._applyInstanceProperties();\r\n    }\r\n    let shouldUpdate = false;\r\n    const changedProperties = this._changedProperties;\r\n    try {\r\n      shouldUpdate = this.shouldUpdate(changedProperties);\r\n      if (shouldUpdate) {\r\n        this.update(changedProperties);\r\n      } else {\r\n        this._markUpdated();\r\n      }\r\n    } catch (e) {\r\n      // Prevent `firstUpdated` and `updated` from running when there's an\r\n      // update exception.\r\n      shouldUpdate = false;\r\n      // Ensure element can accept additional updates after an exception.\r\n      this._markUpdated();\r\n      throw e;\r\n    }\r\n    if (shouldUpdate) {\r\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\r\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\r\n\r\n        const bufferTime = this.getEarlyNumAttribute('bufferTime');\r\n        // Delfay firstUpdated() if render buffer is enabled\r\n        if(bufferTime !== undefined) {\r\n          const $noNextRender = timer(bufferTime);\r\n          \r\n          // Notify about firstUpdated after next rerender OR fallback to buffer timeout if no rerender happens\r\n          combineLatest([$noNextRender, this._$rerendered]).pipe(first()).subscribe(() => {\r\n            this.firstUpdated(changedProperties);\r\n          });\r\n        }\r\n        else {\r\n          this.firstUpdated(changedProperties);\r\n        }\r\n      }\r\n      this.updated(changedProperties);\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _markUpdated() {\r\n    this._changedProperties = new Map();\r\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise that resolves when the element has completed updating.\r\n   * The Promise value is a boolean that is `true` if the element completed the\r\n   * update without triggering another update. The Promise result is `false` if\r\n   * a property was set inside `updated()`. If the Promise is rejected, an\r\n   * exception was thrown during the update.\r\n   *\r\n   * To await additional asynchronous work, override the `_getUpdateComplete`\r\n   * method. For example, it is sometimes useful to await a rendered element\r\n   * before fulfilling this Promise. To do this, first await\r\n   * `super._getUpdateComplete()`, then any subsequent state.\r\n   *\r\n   * @returns {Promise} The Promise returns a boolean that indicates if the\r\n   * update resolved without triggering another update.\r\n   */\r\n  get updateComplete() {\r\n    return this._getUpdateComplete();\r\n  }\r\n\r\n  /**\r\n   * Override point for the `updateComplete` promise.\r\n   *\r\n   * It is not safe to override the `updateComplete` getter directly due to a\r\n   * limitation in TypeScript which means it is not possible to call a\r\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\r\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\r\n   * This method should be overridden instead. For example:\r\n   *\r\n   *   class MyElement extends LitElement {\r\n   *     async _getUpdateComplete() {\r\n   *       await super._getUpdateComplete();\r\n   *       await this._myChild.updateComplete;\r\n   *     }\r\n   *   }\r\n   * @protected\r\n   */\r\n  _getUpdateComplete() {\r\n    return this._updatePromise;\r\n  }\r\n\r\n  /**\r\n   * Controls whether or not `update` should be called when the element requests\r\n   * an update. By default, this method always returns `true`, but this can be\r\n   * customized to control when to update.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @protected\r\n   */\r\n  shouldUpdate(_changedProperties: PropertyValues): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Updates the element. This method reflects property values to attributes.\r\n   * It can be overridden to render and keep updated element DOM.\r\n   * Setting properties inside this method will *not* trigger\r\n   * another update.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @protected\r\n   */\r\n  update(_changedProperties: PropertyValues) {\r\n    if (this._reflectingProperties !== undefined &&\r\n        this._reflectingProperties.size > 0) {\r\n      // Use forEach so this works even if for/of loops are compiled to for\r\n      // loops expecting arrays\r\n      this._reflectingProperties.forEach(\r\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\r\n      this._reflectingProperties = undefined;\r\n    }\r\n    this._markUpdated();\r\n  }\r\n\r\n  /**\r\n   * Invoked whenever the element is updated. Implement to perform\r\n   * post-updating tasks via DOM APIs, for example, focusing an element.\r\n   *\r\n   * Setting properties inside this method will trigger the element to update\r\n   * again after this update cycle completes.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @protected\r\n   */\r\n  updated(_changedProperties: PropertyValues) {\r\n  }\r\n\r\n  /**\r\n   * Invoked when the element is first updated. Implement to perform one time\r\n   * work on the element after update.\r\n   *\r\n   * Setting properties inside this method will trigger the element to update\r\n   * again after this update cycle completes.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @protected\r\n   */\r\n  firstUpdated(_changedProperties: PropertyValues) {\r\n  }\r\n\r\n  getEarlyNumAttribute(attrName: string) {\r\n    const isNumber = (str: any) => {\r\n      if (![\"string\", \"number\"].includes(typeof str)) return false; // we only process strings!  \r\n      return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n         !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n    };\r\n    const attrVal = this.getAttribute(attrName);\r\n    if(isNumber(attrVal)) return +attrVal!;\r\n    const thisVal = (this as any)[attrName];\r\n    if(isNumber(thisVal)) return +attrVal!;\r\n    else return undefined;\r\n  }\r\n}\r\n\r\n}\r\n\r\nexport abstract class UpdatingElement extends UpdatingElementMixin(HTMLElement) {}\r\n"]}